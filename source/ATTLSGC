  // AT-TLS
  //
  //  Get the certificate
  //
  HEREIAM
  char * applid = "ZZZ";
  memset(&ioc,0,sizeof(ioc));     //* set all unused fields to zero
  ioc.TTLSi_Req_Type = TTLS_QUERY_ONLY ;
  int command;

  command = SIOCTTLSCTL;
  ioc.TTLSi_Ver = TTLS_VERSION2;
  int lioc;
  lioc = sizeof(ioc);
  //
  // this is used for getting data from ATTLS
  // a header and a number of quads
  //
  memset(&query,0,sizeof(query));
  // move the eye catcher
  memcpy(&query.header.TTLSHeaderIdent[0],TTLSHeaderIdentifier,8);
  query.header.TTLSHdr_BytesNeeded = 128;
  query.header.TTLSHdr_SetCount =  0;
  query.header.TTLSHdr_GetCount =  1;

  //query.q2.TTLSQ_Key = TTLSK_Host_Status   ;
  query.q1.TTLSQ_Key = TTLSK_Certificate   ;
  //query.q1.TTLSQ_Offset     =  0 ;
  //query.q1.TTLSQ_Length     =  0;

  ioc.TTLSi_BufferPtr = (char *) &query;
  ioc.TTLSi_BufferLen = sizeof(query);
  //printHex(stdout,&query,256);
  ioc.TTLSi_Ver = TTLS_VERSION2;

  BPX1IOC(&sd,
            &command,
            &lioc,
            &ioc ,
            &rv,
            &rc,
            &rs);
   HEREIAM
   printf("ioc.TTLSi_Cert_Len %d \n",ioc.TTLSi_Cert_Len);
   printf("get cert  IOC\n");
   if (check("BPX1IOC Get cert",rv,rc,rs) != 0)
      exit(1);

   // use certificate to change userid

   struct __certificate  ct;
   ct.__cert_type = __CERT_X509;
   char * pData = (char *)  ioc.TTLSi_BufferPtr;
              // offsets are from start of header
   ct.__cert_length = ioc.TTLSi_Cert_Len;
   ct.__cert_ptr    =& pData[query.q1.TTLSQ_Offset] ;
   printHex(stdout,ct.__cert_ptr, 66);
   rc = pthread_security_applid_np(__CREATE_SECURITY_ENV,
            __CERTIFICATE_IDENTITY,
            sizeof(ct),
            &ct,
            "xxxxxxxx",
            0,applid);
   if ( rc != 0)
     perror("pthead security");
   switch (errno)
   {
   case ESRCH :
     printf("ESRCH:"
     "The user ID provided as input is not defined to the "
     "security product or does not have an OMVS segment defined"
     "\n");
     break;
   }
  if (rc != 0)
  {
  lOutBuff = sprintf(&outBuff[0],
  "pthread_s... applid %s  rc = %d errno %d %s errno2 %8.8x\n\n",
          applid,
          rc,errno,strerror(errno),__errno2());
  }
  else
  {
    rc = __getuserid(&userid[0], userlen);
    if (rc != 0)
      printf("getuser rc %d\n",rc);
    printf("userid %d  %*.*s\n",userlen,userlen,userlen,userid);
    lOutBuff = sprintf(&outBuff[0],
          "pthread_s... applid %s rc = 0 userid %*.*s.\n",
          applid,
          userlen,userlen,userid);
  }
   HEREIAM
  printf("%s\n",outBuff);
